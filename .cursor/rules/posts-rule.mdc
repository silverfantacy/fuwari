# Posts 文章規則

## 文章位置與結構
- **文章目錄**：`/src/content/posts/` 
- **語法範例**：參考 `/src/content/posts/markdown.md` 和 `/src/content/posts/markdown-extended.md`
- **子目錄支援**：可創建子目錄來組織相關文章和資源檔案

### 文章檔案結構
```
src/content/posts/
├── article-name.md          # 單篇文章
└── article-with-assets/     # 含資源的文章
    ├── index.md            # 文章內容
    ├── cover.jpg           # 封面圖片
    └── assets/             # 其他資源
```

## 前置元數據 (Front Matter)

### 標準格式
```yaml
---
title: 文章標題
published: YYYY-MM-DD
description: '文章摘要描述'
image: '封面圖片路徑'
tags: [標籤1, 標籤2, 標籤3]
category: '分類'
draft: false 
---
```

### 欄位詳細說明
- **`title`**: 文章標題（必填）
  - 建議 60 字元以內
  - 包含主要關鍵字
  - 避免特殊符號
- **`published`**: 發布日期（必填）
  - 格式：YYYY-MM-DD
  - 使用實際發布日期
- **`description`**: 文章摘要（必填）
  - 150-160 字元以內
  - 包含關鍵字，用於 SEO
  - 簡潔描述文章重點
- **`image`**: 封面圖片（選填）
  - 支援相對路徑 `./cover.jpg`
  - 支援絕對路徑 `/images/cover.jpg`
  - 支援外部連結 `https://...`
- **`tags`**: 文章標籤（選填但建議使用）
  - 3-5 個標籤為佳
  - 使用陣列格式 `[tag1, tag2, tag3]`
- **`category`**: 文章分類（必填）
  - 使用單一分類
  - 必須從下方預定義分類中選擇
- **`draft`**: 草稿狀態（必填）
  - `true`: 草稿，不會發布
  - `false`: 正式發布

## 分類系統 (Categories)

### 主要分類列表
- **前端** - 前端開發技術、框架、UI/UX 等
- **後端** - 後端開發、API、資料庫等
- **AI** - 人工智慧、機器學習、AI 平台等
- **工具** - 開發工具、系統工具、效率工具等
- **個人專案** - 個人開發專案的記錄和分享
- **活動** - 技術活動、會議、研討會筆記
- **行銷** - 行銷策略、數位行銷、使用者體驗等
- **網站追蹤** - 網站分析、追蹤技術、SEO 等
- **伺服器** - 伺服器配置、部署、維運等
- **個人筆記** - 學習筆記、技術總結等

### 分類選擇指南
1. **技術文章**：根據主要技術領域選擇（前端/後端/AI）
2. **工具介紹**：統一使用「工具」分類
3. **專案分享**：使用「個人專案」分類
4. **學習記錄**：使用「個人筆記」分類

## 標籤系統 (Tags)

### 標籤使用原則
1. **數量控制**：每篇文章 3-5 個標籤
2. **優先複用**：優先使用現有標籤，避免創建相似標籤
3. **層次分明**：從廣泛到具體，形成標籤層次
4. **格式統一**：遵循下方格式規範

### 標籤格式規範
- **技術名稱**：保持原有大小寫（Vue 3, JavaScript, TypeScript）
- **工具名稱**：保持官方命名（Docker, Git, Warp）
- **概念術語**：使用中文（前端開發, 性能優化, 使用者體驗）
- **版本標記**：使用空格分隔（Vue 3, Python 3.9）
- **縮寫詞彙**：統一格式（CICD, API, UI）

### 常用標籤分類

#### 前端技術
- **框架/庫**：Vue 2, Vue 3, React, Angular, jQuery
- **語言**：JavaScript, TypeScript, HTML, CSS
- **狀態管理**：Pinia, Vuex, Redux
- **建構工具**：Vite, Webpack, Astro
- **UI/UX**：UI元件, 動畫效果, 響應式設計
- **概念**：前端開發, 性能優化, 跨域請求, CORS

#### 後端技術
- **語言/框架**：Python, PHP, Laravel, Node.js
- **資料庫**：MySQL, PostgreSQL, MongoDB
- **API**：REST API, GraphQL, API設計
- **概念**：後端開發, 微服務, 資料處理

#### AI 相關
- **平台/工具**：Dify, Ollama, OpenAI, ChatGPT
- **模型**：Llama 3, GPT, BERT
- **技術**：LLM, 知識庫, RAG, 機器學習
- **概念**：AI平台, 自架伺服器, 人工智慧

#### 開發工具
- **終端/CLI**：Warp, Terminal, CLI, Shell
- **版本控制**：Git, GitHub, GitLab
- **容器化**：Docker, Kubernetes
- **IDE/編輯器**：VS Code, Cursor
- **系統工具**：btop, 系統監控
- **概念**：開發工具, 效率工具, 開發環境

#### DevOps/部署
- **CI/CD**：CICD, GitLab, GitHub Actions
- **雲端服務**：AWS, GCP, Azure, Zeabur
- **概念**：DevOps, 自動化部署, 容器化

#### 行銷/分析
- **追蹤工具**：Google Analytics, Meta Pixel, GTM
- **概念**：峰值體驗, 電子商務, 轉化率, 使用者體驗
- **平台**：Google Tag Manager, Meta

#### 實用工具
- **日曆**：iCal, Google Calendar, 日曆事件
- **網頁功能**：瀑布流排版, Masonry, 廣告嵌入
- **系統**：Server, 伺服器管理, 網站追蹤

## 寫作風格指南

### 文章結構
1. **標題層次**：使用 H1-H6，保持層次清晰
2. **內容組織**：引言 → 主體 → 結論/總結
3. **段落長度**：每段 3-4 句話，避免過長
4. **視覺元素**：適當使用列表、表格、程式碼區塊

### 語言風格
- **語言**：以繁體中文為主
- **專業術語**：技術名詞保留英文，適當加註中文說明
- **語調**：專業但友善，避免過於艱深
- **實用性**：提供可操作的步驟和實例

### 程式碼規範
```javascript
// 使用語法高亮
// 加入適當註解
// 提供完整可執行的範例
```

## SEO 優化建議

### 關鍵字優化
1. **標題最佳化**：包含主要關鍵字，並考慮語意搜尋（Semantic Search）與長尾關鍵字（Long-tail Keywords），提升 AI 搜尋與 Google AIO 呈現機率。
2. **描述優化**：精準描述內容，包含相關關鍵字與同義詞，利於語意理解與 AI 摘要。
3. **內容結構**：使用適當的標題階層（H1-H6），利於 Google AI Overviews（AIO）與語音搜尋。
4. **內部連結**：適當引用相關文章，並於重要主題設置「主題群集」結構（Topic Cluster），強化語意網絡。
5. **外部連結**：引用高權威來源，並適時加入品牌提及（Brand Mention），提升 E-E-A-T。
6. **同義詞與語意變體**：內容中自然融入主要關鍵字的同義詞、相關詞，參考 Yoast SEO 內容分析流程。

### 結構化資料與技術優化
1. **結構化資料**：建議於文章中加入 Schema.org 結構化標記（如 Article、FAQ、BreadcrumbList），提升 AI 搜尋與豐富摘要（Rich Snippet）機會。
2. **hreflang 與多語支援**：如有多語內容，於頁面 <head> 或 sitemap 加入 hreflang 標記，正確標示語言與地區。
3. **Canonical 標籤**：每篇文章應設置自我參照 canonical，避免重複內容。
4. **Open Graph/Twitter Card**：補充 og:title、og:description、og:image、twitter:card 等社群分享標籤。
5. **圖片優化**：使用描述性檔名、alt 文字，並建議加入圖片結構化資料（ImageObject）。
6. **視覺搜尋/語音搜尋**：內容結構清晰、語意明確，利於 AI 視覺與語音搜尋解析。

### 使用者體驗（UX）
1. **行動裝置友好**：確保 RWD，提升 Core Web Vitals 分數。
2. **目錄與導覽**：長文建議加入目錄（TOC），提升可讀性與跳轉效率。
3. **內容可讀性**：段落簡潔、語句流暢，利於 AI 摘要與語音閱讀。
4. **互動元素**：適度加入表格、列表、程式碼區塊、FAQ，提升內容多樣性。

### 內容品質與 E-E-A-T
1. **專業性（Expertise）**：內容需展現專業知識，引用權威來源。
2. **經驗性（Experience）**：適度分享實際經驗、案例、操作步驟。
3. **權威性（Authoritativeness）**：明確標示作者、品牌、組織資訊。
4. **可信度（Trustworthiness）**：內容正確、來源可靠，並定期檢查外部連結有效性。
5. **AI 內容標註**：如有 AI 生成內容，建議標註來源與審核流程。

### SEO 自動化與內容維護
1. **SEO 檢查清單**：撰寫/更新時，依據 SEO 檢查清單（如 meta、結構化資料、內外連結、圖片、標題、描述、E-E-A-T）自我審核。
2. **內容審核與更新**：定期檢查舊文，更新技術、數據、連結，並標註更新日期。
3. **SEO 工具輔助**：建議使用 Yoast SEO、SEOmatic、Google Search Console、PageSpeed Insights 等工具輔助內容分析與優化。
4. **SEO 內容策略**：規劃主題群集、長尾關鍵字、品牌提及、外部連結等策略，持續優化內容佈局。
5. **SEO 自動化**：可考慮自動化檢查結構化資料、連結有效性、內容重複、標題長度等。

### AI 與 SEO 趨勢
1. **Google AI Overviews（AIO）**：內容需聚焦解決問題、明確回答常見問題，利於 AIO 摘要收錄。
2. **語意搜尋**：強化語意相關性，內容需涵蓋主題多元面向，並自然融入關鍵詞變體。
3. **視覺搜尋/語音搜尋**：圖片、影音內容需有結構化資料與語意描述，提升 AI 理解。
4. **品牌提及與外部連結**：積極爭取高權威網站引用與品牌曝光。
5. **內容創作與維護**：持續追蹤 SEO 趨勢，定期優化內容結構與技術實踐。

## 內容品質標準

### 技術文章要求
1. **準確性**：確保技術資訊正確無誤
2. **時效性**：使用最新的技術版本和最佳實踐
3. **完整性**：提供完整的解決方案或教學步驟
4. **實用性**：讀者能夠實際應用文章內容

### 審核檢查項目
- [ ] Front matter 格式正確
- [ ] 分類和標籤符合規範
- [ ] 文章結構清晰
- [ ] 程式碼範例可執行
- [ ] 圖片和連結有效
- [ ] 語法和錯字檢查

## 常見問題和注意事項

### 標籤和分類
- **避免重複**：不要創建意義相同的標籤
- **保持一致**：使用統一的命名格式
- **定期整理**：移除不再使用的標籤

### 內容維護
- **定期更新**：更新過時的技術內容
- **連結檢查**：確保外部連結有效
- **版本更新**：及時更新軟體版本資訊

### 最佳實踐
1. 撰寫前先查看現有標籤和分類
2. 優先使用已建立的標籤系統
3. 保持文章主題聚焦
4. 提供實際可操作的範例
5. 適當加入個人經驗和見解
